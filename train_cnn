import numpy as np
import pandas as pd

from keras.layers import Dense, Conv2D, Conv1D, Input, Flatten
from keras.layers import MaxPool2D, AvgPool2D, MaxPool1D
from keras.models import Model


col_read = ['GameId', 'PlayId', 'Team', 'X', 'Y', 'S', 'Dir',
            'NflId', 'Season', 'NflIdRusher', 'PlayDirection',
            'PossessionTeam', 'HomeTeamAbbr', 'VisitorTeamAbbr', 'Yards']
train = pd.read_csv('./input/train.csv', usecols=col_read)

# ============================================================================== Preprocess
abbr_map = {
    'ARZ': 'ARI',
    'BLT': 'BAL',
    'CLV': 'CLE',
    'HST': 'HOU'
}
train['PossessionTeam'] = train['PossessionTeam'].replace(abbr_map)

# === identify offense team
train.loc[(train['Team'] == 'home') & (train['PossessionTeam'] == train['HomeTeamAbbr']), 'Side'] = 'offense'
train.loc[(train['Team'] == 'away') & (train['PossessionTeam'] == train['VisitorTeamAbbr']), 'Side'] = 'offense'
train['Side'] = train['Side'].fillna('defense')

# === speed
train['Dir'] = train['Dir'].fillna(0)
train['Sx'] = np.cos(train['Dir'] / 180 * np.pi) * train['S']
train['Sy'] = np.sin(train['Dir'] / 180 * np.pi) * train['S']

# === (rusher, defenser) pair
n_member = 11
col_feature = ['X', 'Y', 'Sx', 'Sy']
arr_rush = train.loc[train['NflId'] == train['NflIdRusher'], col_feature].values
arr_def = train.loc[train['Side'] == 'defense', col_feature].values
arr_delta = arr_def - np.repeat(arr_rush, n_member, axis=0)   # delta_X, delta_Y, delta_Sx, delta_Sy
arr_feature = np.concatenate([arr_delta, arr_def[:,2:]], axis=1)

# x_train = np.reshape(arr_feature, [n_member, 6, :])
x_train = np.reshape(arr_feature, [-1, 11, 6])
y_train = train.loc[::22, 'Yards'].values

def build_model():
    inp = Input(shape=(11,6))
    x = Conv1D(128, kernel_size=1, strides=1, activation='relu')(inp)
    x = Conv1D(160, kernel_size=1, strides=1, activation='relu')(x)
    x = Conv1D(128, kernel_size=1, strides=1, activation='relu')(x)
    x = MaxPool1D(pool_size=11)(x)
    x = Flatten()(x)
    out = Dense(1, activation='relu')(x)

    model = Model(input=inp, output=out)
    model.compile(optimizer='adam', loss='mse')

    print(model.summary())
    return model

model = build_model()
model.fit(
    x_train,
    y_train,
    batch_size=64,
    epochs=1,
    verbose=1
)


